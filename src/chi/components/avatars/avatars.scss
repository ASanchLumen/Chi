@import '_mixins';
@import '_variables';

$avatar-sizes: (
  xs: 0.75rem,
  sm: 1rem,
  sm--2: 1.25rem,
  sm--3: 1.5rem,
  md: 2rem,
  lg: 4rem,
  xl: 6rem,
  xxl: 8rem);
$avatar-colors: (grey,
  red,
  pink,
  purple,
  indigo,
  light-blue,
  blue,
  teal,
  mint,
  green,
  yellow,
  orange,
  light,
  inverse,
  secondary,
  primary);
$avatar-default-size: 'md';

.chi-avatar {

  background-color: set-color(grey, 20);
  border-radius: 50%;
  color: $text-color;
  display: inline-block;
  font-size: map-get($avatar-sizes, $avatar-default-size) / 2;
  height: map-get($avatar-sizes, $avatar-default-size);
  line-height: map-get($avatar-sizes, $avatar-default-size);
  overflow: hidden;
  position: relative;
  text-align: center;
  vertical-align: middle;
  width: map-get($avatar-sizes, $avatar-default-size);

  & > img,
  & > svg {
    height: 100%;
    width: 100%;
  }

  & > i,
  &.chi-icon > svg {
    height: 50%;
    margin: 25%;
    width: 50%;
  }

  &.chi-icon {
    font-size: map-get($avatar-sizes, $avatar-default-size) / 2;
    height: map-get($avatar-sizes, $avatar-default-size);
    line-height: map-get($avatar-sizes, $avatar-default-size);
    width: map-get($avatar-sizes, $avatar-default-size);
  }

  @each $type in map-keys($avatar-sizes) {
    &.-#{$type} {
      font-size: map-get($avatar-sizes, $type) / 2;
      height: map-get($avatar-sizes, $type);
      line-height: map-get($avatar-sizes, $type);
      width: map-get($avatar-sizes, $type);

      & > i {
        &.chi-icon {
          font-size: map-get($avatar-sizes, $type) / 2;
        }
      }
    }
  }

  @each $color in $avatar-colors {
    &.-#{$color} {

      @if( $color == 'light') {
        background-color: transparent;
        border: max(0.0625rem, map-get($avatar-sizes, $avatar-default-size) / 48) solid map-get($colorscheme, white);
        color: map-get($colorscheme, white);
      } @else if($color == 'inverse') {
        background-color: transparent;
        border: max(0.0625rem, map-get($avatar-sizes, $avatar-default-size) / 48) solid map-get($colorscheme, white);
        color: map-get($colorscheme, white);
      } @else if ( $color == 'secondary') {
        background-color: white;
        border: max(0.0625rem, map-get($avatar-sizes, $avatar-default-size) / 48) solid $secondary-color;
        color: $secondary-color;

        &.-transparent {
          background-color: transparent;
        }
      } @else if ( $color == 'primary') {
        background-color: white;
        border: max(0.0625rem, map-get($avatar-sizes, $avatar-default-size) / 48) solid $primary-color;
        color: $primary-color;

        &.-transparent {
          background-color: transparent;
        }
      } @else {
        background-color: white;
        border: max(0.0625rem, map-get($avatar-sizes,
            $avatar-default-size) / 48) solid map-get(map-get($colorscheme, $color), 60);
        color: map-get(map-get($colorscheme, $color), 70);

        &.-transparent {
          background-color: transparent;
        }
      }

      @each $type in map-keys($avatar-sizes) {
        &.-#{$type} {
          border-width: max(0.0625rem, map-get($avatar-sizes, $type) / 48);
        }
      }
    }
  }
}

.m-avatarGroup {
  align-items: center;
  display: flex;

  .chi-avatar {
    margin-right: 0.75rem;
  }
}
