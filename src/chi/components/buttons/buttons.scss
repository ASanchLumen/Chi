@import 'mixins';
@import 'variables';

$state-colors: (brand: emerald, danger: red, info: navy, dark: grey);

$sizes: (
  xs: (
    font-size: 0.75rem,
    line-height: 1rem,
    padding: 0.25rem 0.5rem,
    border-radius: 0.75rem,
    icons: (
      height: 0.75rem,
      width: 0.75rem,
      padding: 0.375rem,
    ),
  ),
  sm: (
    font-size: 0.8125rem,
    line-height: 1rem,
    padding: 0.5rem 1rem,
    border-radius: 1rem,
    icons: (
      height: 1rem,
      width: 1rem,
      padding: 0.5rem,
    ),
  ),
  md: (
    font-size: 0.875rem,
    line-height: 1rem,
    padding: 0.5rem 1rem,
    border-radius: 1rem,
    icons: (
      height: 1rem,
      width: 1rem,
      padding: 0.5rem,
    ),
  ),
  lg: (
    font-size: 0.875rem,
    line-height: 1rem,
    padding: 0.75rem 1.5rem,
    border-radius: 1.5rem,
    icons: (
      height: 1rem,
      width: 1rem,
      padding: 0.75rem,
    ),
  ),
  xl: (
    font-size: 1rem,
    line-height: 1rem,
    padding: 0.75rem 1.5rem,
    border-radius: 1.5rem,
    icons: (
      height: 1.25rem,
      width: 1.25rem,
      padding: 0.625rem,
    ),
  ),
  xxl: (
    font-size: 1.125rem,
    line-height: 1.125rem,
    padding: 0.875rem 1.5rem,
    border-radius: 1.5rem,
    icons: (
      height: 1.5rem,
      width: 1.5rem,
      padding: 0.75rem,
    ),
  )
);

.chi {
  .a-btn {
    & {
      background-color: set-color(white);
      border: 0.0625rem solid set-color(grey, 30);
      border-radius: $border-radius;
      box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
      color: $text-color;
      cursor: pointer;
      display: inline-flex;
      font-family: 'Open Sans', 'Helvetica Neue', Arial, Helvetica, Verdana, sans-serif;
      font-size: $text-small;
      font-weight: 600;
      line-height: $line-height-smaller;
      outline: 0;
      padding: 0.4375rem 0.9375rem;
      text-align: center;
      vertical-align: middle;
      white-space: nowrap;

      &[disabled] {
        opacity: 0.65;
        pointer-events: none;
      }

      .a-icon {
        height: 1rem;
        width: 1rem;
      }

      .a-spinner {
        height: 1rem;
        width: 1rem;
      }

      &__content {
        align-items: center;
        display: inline-flex;
        justify-content: center;

        & > :not(:last-child) {
          margin-right: 0.5rem;
        }
      }

      @each $type in map-keys($sizes) {
        &.-#{$type} {
          font-size: map-get(map-get($sizes, $type), font-size);
          line-height: map-get(map-get($sizes, $type), line-height);
          padding: map-get(map-get($sizes, $type), padding);

          .a-icon {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);

            &[class^="icon-"], &[class*=" icon-"] {
              font-size: map-get(map-get($sizes, $type), font-size);
              line-height: map-get(map-get($sizes, $type), line-height);
            }
          }

          .a-spinner {
            height: map-get(map-get(map-get($sizes, $type), icons), height);
            width: map-get(map-get(map-get($sizes, $type), icons), width);
          }

          &.-icon {
            padding: map-get(map-get(map-get($sizes, $type), icons), padding);
          }

          &.-pill {
            border-radius: map-get(map-get($sizes, $type), border-radius);
          }
        }
      }

      &:hover,
      &.-hover {
        border: 0.0625rem solid set-color(grey, 40);
        box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        text-decoration: none;
      }

      &:focus,
      &.-focus {
        border: 0.0625rem solid set-color(grey, 40);
        box-shadow: 0 0 0 3px rgba(set-color(grey, 30), 0.6);
        z-index: 1;
      }

      &:active,
      &.-active {
        &,
        &:focus,
        &.-focus {
          background-color: set-color(grey, 20);
          border: 0.0625rem solid set-color(grey, 40);
          box-shadow: inset 0 1px 2px 0 rgba(set-color(black), 0.2);
        }
      }

      &.-icon {
        padding: 0.4375rem;
      }

      &.-pill {
        border-radius: 1rem;
      }

      &.-float {
        border-radius: 50%;
        padding: 0.6875rem;
        transition: transform 0.2s cubic-bezier(0.95, -0.18, 0.65, 2.46);

        .a-icon {
          height: 1rem;
          width: 1rem;
        }

        &:active,
        &.-active,
        &:focus,
        &.-focus,
        &:hover,
        &.-hover {
          transform: scale(1.2);
        }
      }

      &.-close {
        background-color: transparent;
        border: none;
        box-shadow: none;
        opacity: 0.6;

        &:hover,
        &.-hover {
          border: none;
          box-shadow: none;
          opacity: 1;
        }

        &:focus,
        &.-focus {
          border: none;
          box-shadow: none;
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: transparent;
            border: none;
            box-shadow: none;
          }
        }
      }

      &.-outline {
        background-color: set-color(white);
        border: 0.0625rem solid set-color(grey, 50);

        &:hover,
        &.-hover {
          background-color: set-color(grey, 50);
          color: set-color(white);

          .a-icon {
            color: set-color(white);
          }

          .a-spinner__icon .path {
            stroke: set-color(white);
          }
        }

        &:focus,
        &.-focus {
          border: 0.0625rem solid set-color(grey, 50);
          box-shadow: 0 0 0 3px rgba(set-color(grey, 50), 0.3);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color(grey, 60);
            border: 0.0625rem solid rgba(set-color(black), 0.2);
            box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
            color: set-color(white);
          }

          .a-icon {
            color: set-color(white);
          }
        }
      }

      &.-flat {
        background-color: transparent;
        border: 0;
        box-shadow: none;
        color: set-color(grey, 90);
        padding: 0.5rem 1rem;

        &.-icon {
          padding: 0.5rem;
        }

        @each $type in map-keys($sizes) {
          &.-#{$type} {
            font-size: map-get(map-get($sizes, $type), font-size);
            line-height: map-get(map-get($sizes, $type), line-height);
            padding: map-get(map-get($sizes, $type), padding);

            .a-icon {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);

              &[class^="icon-"], &[class*=" icon-"] {
                font-size: map-get(map-get($sizes, $type), font-size);
                line-height: map-get(map-get($sizes, $type), line-height);
              }
            }

            .a-spinner {
              height: map-get(map-get(map-get($sizes, $type), icons), height);
              width: map-get(map-get(map-get($sizes, $type), icons), width);
            }

            &.-icon {
              padding: map-get(map-get(map-get($sizes, $type), icons), padding);
            }
          }
        }

        &:hover,
        &.-hover {
          background-color: set-color(white);
          border: 0.0625rem solid set-color(grey, 40);
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
          padding: 0.4375rem 0.9375rem;

          &.-icon {
            padding: 0.4375rem;
          }

          @each $type in map-keys($sizes) {
            &.-#{$type} {
              font-size: map-get(map-get($sizes, $type), font-size);
              line-height: map-get(map-get($sizes, $type), line-height);
              @if $type == 'xs' { padding: 0.1875rem 0.4375rem }
                @else if $type == 'sm' { padding: 0.4375rem 0.9375rem }
                  @else if $type == 'md' { padding: 0.4375rem 0.9375rem }
                    @else if $type == 'lg' { padding: 0.6875rem 1.4375rem }
                      @else if $type == 'xl' { padding: 0.6875rem 1.4375rem }
                        @else if $type == 'xxl' { padding: 0.8125rem 1.4375rem }

              .a-icon {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);

                &[class^="icon-"], &[class*=" icon-"] {
                  font-size: map-get(map-get($sizes, $type), font-size);
                  line-height: map-get(map-get($sizes, $type), line-height);
                }
              }

              .a-spinner {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);
              }

              &.-icon {
                padding: (map-get(map-get(map-get($sizes, $type), icons), padding)) - 0.0625rem;
              }
            }
          }
        }

        &:focus,
        &.-focus {
          background-color: set-color(white);
          border: 0.0625rem solid set-color(grey, 40);
          box-shadow: 0 0 0 3px rgba(set-color(grey, 30), 0.6);
          padding: 0.4375rem 0.9375rem;

          &.-icon {
            padding: 0.4375rem;
          }

          @each $type in map-keys($sizes) {
            &.-#{$type} {
              font-size: map-get(map-get($sizes, $type), font-size);
              line-height: map-get(map-get($sizes, $type), line-height);
              padding: map-get(map-get($sizes, $type), padding);

              .a-icon {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);

                &[class^="icon-"], &[class*=" icon-"] {
                  font-size: map-get(map-get($sizes, $type), font-size);
                  line-height: map-get(map-get($sizes, $type), line-height);
                }
              }

              .a-spinner {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);
              }

              &.-icon {
                padding: map-get(map-get(map-get($sizes, $type), icons), padding);
              }
            }
          }
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color(grey, 20);
            border: 0.0625rem solid rgba(set-color(black), 0.2);
            box-shadow: inset 0 1px 2px 0 rgba(set-color(black), 0.2);
            padding: 0.4375rem 0.9375rem;
          }

          &.-icon {
            padding: 0.4375rem;
          }

          @each $type in map-keys($sizes) {
            &.-#{$type} {
              font-size: map-get(map-get($sizes, $type), font-size);
              line-height: map-get(map-get($sizes, $type), line-height);
              padding: map-get(map-get($sizes, $type), padding);

              .a-icon {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);

                &[class^="icon-"], &[class*=" icon-"] {
                  font-size: map-get(map-get($sizes, $type), font-size);
                  line-height: map-get(map-get($sizes, $type), line-height);
                }
              }

              .a-spinner {
                height: map-get(map-get(map-get($sizes, $type), icons), height);
                width: map-get(map-get(map-get($sizes, $type), icons), width);
              }

              &.-icon {
                padding: (map-get(map-get(map-get($sizes, $type), icons), padding)) - 0.0625rem;
              }
            }
          }
        }
      }
    }

    @each $type in map-keys($state-colors) {
      &.-#{$type} {
        background-color: set-color(map-get($state-colors, $type), 60);
        border: 0.0625rem solid set-color(map-get($state-colors, $type), 60);
        box-shadow: 0 1px 1px 0 rgba(set-color(black), 0.04);
        color: set-color(white);

        .a-icon {
          color: inherit;
        }

        .a-spinner__icon .path {
          stroke: set-color(white);
        }

        &:hover,
        &.-hover {
          background-color: set-color(map-get($state-colors, $type), 70);
          border: 0.0625rem solid set-color(map-get($state-colors, $type), 70);
          box-shadow: 0 1px 4px 0 rgba(set-color(black), 0.15);
        }

        &:focus,
        &.-focus {
          box-shadow: 0 0 0 3px rgba(set-color(map-get($state-colors, $type), 70), 0.3);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color(map-get($state-colors, $type), 80);
            border: 0.0625rem solid rgba(set-color(black), 0.2);
            box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
          }
        }

        &.-outline {
          background-color: set-color(white);
          border: 0.0625rem solid set-color(map-get($state-colors, $type), 60);
          color: set-color(map-get($state-colors, $type), 60);

          .a-spinner__icon .path {
            stroke: set-color(map-get($state-colors, $type), 60);
          }

          &:hover,
          &.-hover {
            background-color: set-color(map-get($state-colors, $type), 60);
            color: set-color(white);

            .a-spinner__icon .path {
              stroke: set-color(white);
            }
          }

          &:focus,
          &.-focus {
            border: 0.0625rem solid set-color(map-get($state-colors, $type), 60);
            box-shadow: 0 0 0 3px rgba(set-color(map-get($state-colors, $type), 70), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: set-color(map-get($state-colors, $type), 80);
              border: 0.0625rem solid rgba(set-color(black), 0.2);
              box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
              color: set-color(white);

              .a-spinner__icon .path {
                stroke: set-color(white);
              }
            }
          }
        }

        &.-flat {
          background-color: transparent;
          border: 0;
          box-shadow: none;
          color: set-color(map-get($state-colors, $type), 60);

          &:hover,
          &.-hover {
            background-color: set-color(white);
            border: 0.0625rem solid set-color(map-get($state-colors, $type), 60);
          }

          &:focus,
          &.-focus {
            background-color: set-color(white);
            border: 0.0625rem solid set-color(map-get($state-colors, $type), 60);
            box-shadow: 0 0 0 3px rgba(set-color(map-get($state-colors, $type), 70), 0.4);
          }

          &:active,
          &.-active {
            &,
            &:focus,
            &.-focus {
              background-color: set-color(map-get($state-colors, $type), 60);
              border: 0.0625rem solid rgba(set-color(black), 0.2);
              box-shadow: inset 0 1px 1px 0 rgba(set-color(black), 0.2);
              color: set-color(white);
            }
          }
        }
      }
    }

    &.-dark {
      background-color: set-color(grey, 90);
      border-color: set-color(grey, 90);

      &:hover,
      &.-hover {
        background-color: set-color(grey, 100);
        border-color: set-color(grey, 100);
      }

      &:focus,
      &.-focus {
        box-shadow: 0 0 0 3px rgba(set-color(grey, 90), 0.3);
      }

      &:active,
      &.-active {
        &,
        &:focus,
        &.-focus {
          background-color: set-color(black);
        }
      }

      &.-outline {
        border-color: set-color(grey, 90);
        color: set-color(grey, 90);

        &:hover,
        &.-hover {
          background-color: set-color(grey, 90);
        }

        &:focus,
        &.-focus {
          border-color: set-color(grey, 90);
          box-shadow: 0 0 0 3px rgba(set-color(grey, 90), 0.3);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color(grey, 100);
          }
        }
      }

      &.-flat {
        color: set-color(grey, 90);

        &:hover,
        &.-hover {
          border: 0.0625rem solid set-color(grey, 90);
        }

        &:focus,
        &.-focus {
          border-color: set-color(grey, 90);
          box-shadow: 0 0 0 3px rgba(set-color(grey, 90), 0.3);
        }

        &:active,
        &.-active {
          &,
          &:focus,
          &.-focus {
            background-color: set-color(grey, 90);
          }
        }
      }
    }
  }
}
