---
title: Getting started
---

p.-text
  | Chi provides developers with a collection of HTML and CSS patterns to build fast, reusable, and consistent responsive interfaces.

h3 Install

p.-text
  | Import Chi into your project using npm. Once Chi is installed as a dependency, it can be used via CLI or API.

.-mb2
  :code(lang='bash')
    npm i @centurylink/chi --save-dev

h4 CLI

p.-text
  | The CLI is installed in <code>node_modules/.bin/</code> folder as <code>chi</code>.

p.-text
  | <code>chi</code> command allows you to create a css that contains just the foundations of Chi and the components you
  | use in your project. Also it helps you to copy all Chi assets used by those selected components into the assets
  | folder used by your web app.

.-mb4
  :code(lang='bash')
    vader:example luke$ ./node_modules/.bin/chi buttons grid -c css -o dist

p.-text
  | In the example chi compiles the foundations, buttons and grid into a minified css and place it inside the dist
  | folder. All <code>chi</code> options can be checked invoking the help.

.-mb4
  :code(lang='bash')
    vader:example luke$ ./node_modules/.bin/chi --help
    Usage: bin/cli.js <component-list> -c command -o <output-dir> -p <assets_path>

    Commands:
      all     generates the stylesheet and copies the assets of the selected
              components
      css     generates the stylesheet with the selected components
      assets  copy the selected components assets

    Options:
      --help         Show help                                             [boolean]
      --version      Show version number                                   [boolean]
      -c, --command  command      [choices: "all", "css", "assets"] [default: "all"]
      -o, --output   output folder                               [string] [required]
      -p, --path     assets path                             [string] [default: "/"]

    Examples:
      bin/cli.js grid buttons avatars -o dist/assets -p /assets/

h4 API

p.-text
  | To use the API just require `chi` in your javascript file.

.-mb4
  :code(lang='js')
    var chi = require('@centurylink/chi');

p.-text
  | <code>chi</code> provides three methods:

ul.-text
  li build(options): Generates the css and copies the assets into the dest folder.
  li buildCss(options): Generates the css with the specified components and the foundations and moves it into the dest folder.
  li copyAssets(options): Copies the assets used by the selected components into the dest folder.

h5 options

p.-text Options are common for both methods.

section.a-table.-bordered.-mt3.-mb3
  div
    table(cellpadding='0', cellspacing='0')
      thead
        tr
          th
            div option
          th
            div description
      tbody
        tr
          td names
          td List of components to include. Omit the option to include all of them
        tr
          td dest
          td dest folder in which the result is going to ve copied.
        tr
          td assetsPath
          td root path where the assets are located.

h3 Development

p.-text
  | The preferred way to setup your dev env is through docker. If you have docker installed then run the command

.-mb4
  :code(lang='bash')
    vader:example luke$ npm run docker -- start

p.-text
  | And connect to <a href="http://localhost:8000">http://localhost:8000</a> to start developing in chi and see your
  | changes in the browser. However, if you don't have docker installed and don't plan to install, follow the normal
  | process for all npm projects.

.-mb4
  :code(lang='bash')
    vader:example luke$ npm install
    vader:example luke$ npm start

h4 test

p.-text
  | We are using backstopJS to unit test our css components. In order to execute the unit test run the command

.-mb4
  :code(lang='bash')
    vader:example luke$ npm run docker -- test
  p.-text or
  :code(lang='bash')
    vader:example luke$ npm test

p.-text
  | Test report is created under "reports/html_report" and you can browse the results with your browser.
  | In the event you receive a test failure after adding a new test or making a change and your changes are correct,
  | you will need to override the baseline test with your new changes by running an approve.

.-mb4
  :code(lang='bash')
    vader:example luke$ npm run docker -- approve
  p.-text or
  :code(lang='bash')
    vader:example luke$ npm run approve
