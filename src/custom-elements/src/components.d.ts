/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface ChiDrawer {
    /**
    * to open or close the drawer
    */
    'active': boolean;
    /**
    * to add a backdrop behind the drawer, which covers the viewport
    */
    'backdrop': string;
    /**
    * adds a close button
    */
    'collapsible': boolean;
    /**
    * header title. Not compatible with headless
    */
    'headerTitle': string;
    /**
    * to remove the space for the header
    */
    'headless': boolean;
    /**
    * Hides the drawer
    */
    'hide': () => void;
    /**
    * to set position of the drawer { top, right, bottom or left }
    */
    'position': string;
    /**
    * Shows the drawer.
    */
    'show': () => void;
    /**
    * Toggles active state (show/hide)
    */
    'toggle': () => void;
  }
  interface ChiDrawerAttributes extends StencilHTMLAttributes {
    /**
    * to open or close the drawer
    */
    'active'?: boolean;
    /**
    * to add a backdrop behind the drawer, which covers the viewport
    */
    'backdrop'?: string;
    /**
    * adds a close button
    */
    'collapsible'?: boolean;
    /**
    * header title. Not compatible with headless
    */
    'headerTitle'?: string;
    /**
    * to remove the space for the header
    */
    'headless'?: boolean;
    /**
    * Drawer has been hidden to the user. The animation has completed.
    */
    'onChi:hidden'?: (event: CustomEvent) => void;
    /**
    * Drawer hide method has executed, but the closing animation has not started yet
    */
    'onChi:hide'?: (event: CustomEvent) => void;
    /**
    * Drawer show method has executed, but the showing animation has not started yet
    */
    'onChi:show'?: (event: CustomEvent) => void;
    /**
    * Drawer has been shown to the user and is fully visible. The animation has completed.
    */
    'onChi:shown'?: (event: CustomEvent) => void;
    /**
    * to set position of the drawer { top, right, bottom or left }
    */
    'position'?: string;
  }

  interface ChiIcon {
    /**
    * OPTIONAL. Color of the icon. Accepts any color the text-utility supports {primary, success, warning, danger, inverse, muted}
    */
    'color': string;
    /**
    * Icon to be rendered. View accepted values on text documentation.
    */
    'icon': string;
    /**
    * OPTIONAL. Size of the Icon. {xs, sm, sm--2, sm--3, md, lg, xl, xxl}
    */
    'size': string;
  }
  interface ChiIconAttributes extends StencilHTMLAttributes {
    /**
    * OPTIONAL. Color of the icon. Accepts any color the text-utility supports {primary, success, warning, danger, inverse, muted}
    */
    'color'?: string;
    /**
    * Icon to be rendered. View accepted values on text documentation.
    */
    'icon'?: string;
    /**
    * OPTIONAL. Size of the Icon. {xs, sm, sm--2, sm--3, md, lg, xl, xxl}
    */
    'size'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'ChiDrawer': Components.ChiDrawer;
    'ChiIcon': Components.ChiIcon;
  }

  interface StencilIntrinsicElements {
    'chi-drawer': Components.ChiDrawerAttributes;
    'chi-icon': Components.ChiIconAttributes;
  }


  interface HTMLChiDrawerElement extends Components.ChiDrawer, HTMLStencilElement {}
  var HTMLChiDrawerElement: {
    prototype: HTMLChiDrawerElement;
    new (): HTMLChiDrawerElement;
  };

  interface HTMLChiIconElement extends Components.ChiIcon, HTMLStencilElement {}
  var HTMLChiIconElement: {
    prototype: HTMLChiIconElement;
    new (): HTMLChiIconElement;
  };

  interface HTMLElementTagNameMap {
    'chi-drawer': HTMLChiDrawerElement
    'chi-icon': HTMLChiIconElement
  }

  interface ElementTagNameMap {
    'chi-drawer': HTMLChiDrawerElement;
    'chi-icon': HTMLChiIconElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
